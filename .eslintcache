[{"C:\\Users\\walz\\portfolio\\src\\index.js":"1","C:\\Users\\walz\\portfolio\\src\\App.js":"2","C:\\Users\\walz\\portfolio\\src\\reportWebVitals.js":"3","C:\\Users\\walz\\portfolio\\src\\components\\Navbar.js":"4","C:\\Users\\walz\\portfolio\\src\\components\\Home.js":"5","C:\\Users\\walz\\portfolio\\src\\components\\Section.js":"6","C:\\Users\\walz\\portfolio\\src\\components\\Cascade.js":"7","C:\\Users\\walz\\portfolio\\src\\components\\Code.js":"8","C:\\Users\\walz\\portfolio\\src\\components\\Terminal.js":"9","C:\\Users\\walz\\portfolio\\src\\components\\Project.js":"10"},{"size":517,"mtime":1610836996927,"results":"11","hashOfConfig":"12"},{"size":560,"mtime":1664273683588,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1610836996927,"results":"14","hashOfConfig":"12"},{"size":915,"mtime":1678578505565,"results":"15","hashOfConfig":"12"},{"size":1377,"mtime":1678508338849,"results":"16","hashOfConfig":"12"},{"size":557,"mtime":1620065547659,"results":"17","hashOfConfig":"12"},{"size":514,"mtime":1610836996923,"results":"18","hashOfConfig":"12"},{"size":643,"mtime":1619969748375,"results":"19","hashOfConfig":"12"},{"size":11779,"mtime":1678507689626,"results":"20","hashOfConfig":"12"},{"size":2604,"mtime":1664963136784,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"11ink0h",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\Users\\walz\\portfolio\\src\\index.js",[],["45","46"],"C:\\Users\\walz\\portfolio\\src\\App.js",[],"C:\\Users\\walz\\portfolio\\src\\reportWebVitals.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Navbar.js",["47","48","49"],"C:\\Users\\walz\\portfolio\\src\\components\\Home.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Section.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Cascade.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Code.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Terminal.js",["50","51","52","53","54","55","56","57","58","59","60","61"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './Terminal.css';\r\n\r\nexport default class Terminal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputText: \"\",\r\n            lines: [\r\n                `\r\n                ~\r\n                my name is aidan, im currently a freelance developer looking to\r\n                expand my horizons to something new and interesting. for the past\r\n                two years i have specialized in web3 and general fullstack web \r\n                app development. i enjoy designing efficient systems and seeing\r\n                them perform at scale. some of my favorite projects are compact and\r\n                effective scripts i wrote on a binge after an idea popped into my\r\n                head. feel free to have a look at my work, and if you are interested\r\n                in working together send me an email @ aidan.m.walz@gmail.com\r\n                ~\r\n                ~\r\n                ~\r\n                Type 'help' for more info on the available commands...`\r\n            ],\r\n            user: \"root\",\r\n            wd: \"~\",\r\n            prevPath: \"\",\r\n            fs: {\r\n                \"~\": {\r\n                    \"code\": {},\r\n                    \"secret\": {}\r\n                }\r\n            },\r\n            version: null\r\n        };\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n        // Scroll any init text into view\r\n        let inputBox = this.ref.current;\r\n        inputBox.scrollTop = inputBox.scrollHeight + 50;\r\n\r\n        // Get total number of commits on portfolio\r\n        axios.get('https://api.github.com/repos/walz0/portfolio/commits', {\r\n            headers: { \"Authorization\": \"Bearer \" + process.env.REACT_APP_GITHUB_TOKEN }\r\n        })\r\n            .then((response) => {\r\n                this.setState({\r\n                    version: parseInt(response.data.length, 10)\r\n                })\r\n            })\r\n            .catch((err) => {})\r\n    }\r\n\r\n    // Push the latest command into history and execute\r\n    push(input) {\r\n        // Parse input to remove undefined output\r\n        let parsed = []\r\n        for (var i = 0; i < input.length; i++) {\r\n            if (input[i] !== undefined) {\r\n                parsed.push(input[i]);\r\n            }\r\n        }\r\n        this.setState({\r\n            lines: \r\n                this.state.lines.concat(\r\n                    parsed\r\n                )\r\n        });\r\n    }\r\n\r\n    getCommand(input) {\r\n        const commands = {\r\n            \"pwd\": () => { \r\n                let base = \"~\";\r\n                if (this.state.wd !== \"~\") {\r\n                    return ([\r\n                        base + this.state.wd.slice(1)\r\n                    ]); \r\n                } \r\n                else {\r\n                    return this.state.user;\r\n                }\r\n            },\r\n            \"ls\": () => { \r\n                // Search file system for current directory\r\n                // Print dirs and files within current directory\r\n                let path = this.state.wd.split('/');\r\n\r\n                // All dirs that have been traversed\r\n                let traversed = [];\r\n                // Temp var for traversing fs\r\n                let temp = []; \r\n\r\n                for (var i = 0; i < path.length; i++) {\r\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\r\n                        // Working dir has been found\r\n                        break;\r\n                    }\r\n                    // Temp var for traversing fs\r\n                    temp = this.state.fs[path[i]];\r\n                    // Push dir\r\n                    traversed.push(path[i]);\r\n                }\r\n\r\n                return (temp == undefined) ? undefined : Object.keys(temp).join('  ');\r\n            },\r\n            // \"l\": () => { return this.getCommand(\"ls\") },\r\n            \"cd\": (newPath) => {\r\n                // Search file system for current directory\r\n                // Print dirs and files within current directory\r\n                let path = this.state.wd.split('/');\r\n\r\n                // All dirs that have been traversed\r\n                let traversed = [];\r\n                // Temp var for traversing fs\r\n                let temp = []; \r\n\r\n                for (var i = 0; i < path.length; i++) {\r\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\r\n                        // Working dir has been found\r\n                        break;\r\n                    }\r\n                    // Temp var for traversing fs\r\n                    temp = this.state.fs[path[i]];\r\n                    // Push dir\r\n                    traversed.push(path[i]);\r\n                }\r\n\r\n                // Do not change directory\r\n                if (newPath[0] == \".\") {\r\n                    return undefined;\r\n                }\r\n                else if (newPath[0] == \"..\") {\r\n                    // Get directories as list\r\n                    let dirs = this.state.wd.split('/');\r\n                    // Update working directory\r\n                    this.setState({\r\n                        wd: dirs.slice(0, dirs.length - 1).join('/')\r\n                    });\r\n                    return undefined;\r\n                }\r\n                else {\r\n                    // Current directory environment\r\n                    let context = temp;\r\n\r\n                    let prefix = newPath[0].slice(0, 2);\r\n\r\n                    // if ../path or ./path\r\n                    if (prefix == \"./\") {\r\n                        // Same behavior as without ./\r\n                        this.setState({\r\n                            wd: this.state.wd + '/' + newPath[0].slice(2)\r\n                        })\r\n                        return undefined;\r\n                    }\r\n                    else if (prefix == \"..\") {\r\n                        \r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            wd: this.state.wd + '/' + newPath\r\n                        })\r\n                        return undefined;\r\n                    }\r\n                }\r\n            },\r\n            \"mkdir\": (dirName) => {\r\n                if (dirName == undefined) {\r\n                    return 'mkdir: missing operand';\r\n                }\r\n\r\n                // Search file system for current directory\r\n                // Print dirs and files within current directory\r\n                let path = this.state.wd.split('/');\r\n\r\n                // If root\r\n                if (path[0] == \"~\") {\r\n                    let temp = this.state.fs;\r\n                    temp['~'][dirName] = {};\r\n                    this.setState({\r\n                        fs: temp\r\n                    });\r\n                    return undefined;\r\n                }\r\n\r\n                // All dirs that have been traversed\r\n                let traversed = [];\r\n                // Temp var for traversing fs\r\n                let temp = []; \r\n\r\n                for (var i = 0; i < path.length - 1; i++) {\r\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\r\n                        // Working dir has been found\r\n                        break;\r\n                    }\r\n                    // Temp var for traversing fs\r\n                    temp = this.state.fs[path[i]];\r\n                    // Push dir\r\n                    traversed.push(path[i]);\r\n                }\r\n\r\n                let currDir = path[path.length - 1];\r\n                // Create new directory\r\n                temp[currDir][dirName] = {};\r\n                // Update state\r\n                this.setState({\r\n                    fs: temp\r\n                });\r\n            },\r\n            \"banner\": () => { return (`\r\n                This is a banner\r\n                ===========================\r\n                :)\r\n            `); },\r\n            \"whoami\": () => { return (this.state.user) }\r\n        }\r\n\r\n\r\n        let argv = input.split(\" \");\r\n\r\n        let hasParams = false;\r\n        // If command has parameters\r\n        if (argv.length > 1) {\r\n            hasParams = true;\r\n        }\r\n\r\n        let selected = \"\";\r\n        for (var c in commands) {\r\n            if (argv[0] === c) {\r\n                selected = c;\r\n            }\r\n        }\r\n\r\n        if (selected !== \"\") {\r\n            let echo = `${this.state.user}:${this.state.wd}λ ${input}`;\r\n            if (hasParams) {\r\n                this.push([echo, commands[selected](argv.slice(1))]);\r\n            } else {\r\n                this.push([echo, commands[selected]()]);\r\n            }\r\n        }\r\n        else {\r\n            this.push([`${input}: command not found`]);\r\n        }\r\n    }\r\n\r\n    handleInput(e) {\r\n        let pos = this.state.user.length + 2 + this.state.wd.length + 1;\r\n        this.setState({\r\n            inputText: e.target.value.slice(pos)\r\n        });\r\n        \r\n        const inputHistory = this.ref.current;\r\n        if (inputHistory != null) {\r\n            inputHistory.scrollTop = inputHistory.scrollHeight + 50;\r\n        }\r\n\r\n        if (e.target.selectionStart < pos) {\r\n            e.target.selectionStart = pos;\r\n        }\r\n    }\r\n\r\n    inputBox() {\r\n        return(\r\n            <input \r\n                autoFocus={ true }\r\n                value={ this.state.user + \":\" + this.state.wd + \"λ \" + this.state.inputText}\r\n                onChange={this.handleInput.bind(this)}\r\n                onKeyDown={this.submitInput.bind(this)}\r\n                onClick={this.handleInput.bind(this)}\r\n                spellCheck={false}></input>\r\n        );\r\n    }\r\n\r\n    inputHistory() {\r\n        // Fill box with lines to push new ones to the bottom\r\n        let output = ``;\r\n        for (var i = 0; i < 200; i++) {\r\n            output += `⠀\r\n            `;\r\n        }\r\n\r\n        let lines = this.state.lines;\r\n        for (i = 0; i < lines.length; i++) {\r\n            if (i == 0) {\r\n                output += `portfoliOS :: [Version ${this.state.version}]\r\n                `;\r\n            }\r\n            output += `${lines[i]}\r\n            `;\r\n        }\r\n\r\n        output = output.replace(/^\\s+/mg, \"\");\r\n\r\n        return(\r\n            <pre ref={this.ref}>\r\n                { output }\r\n            </pre>\r\n        );\r\n    }\r\n\r\n    submitInput(e) {\r\n        let key = e.keyCode;\r\n        let enter = 13;\r\n\r\n        if (key === enter) {\r\n            this.getCommand(this.state.inputText);\r\n            this.setState({ \r\n                inputText: \"\",\r\n                },\r\n                () => {\r\n                    // Scroll terminal to bottom\r\n                    const inputHistory = this.ref.current;\r\n                    if (inputHistory != null) {\r\n                        inputHistory.scrollTop = inputHistory.scrollHeight + 50;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            if (e.target.selectionStart <= 2) {\r\n                e.target.selectionStart = 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    circle(color) {\r\n        return(\r\n            <div className=\"circle\">\r\n                <svg viewBox=\"0 0 100 100\" id=\"circle\">\r\n                    <circle cx=\"50\" cy=\"50\" r=\"50\" fill={color} />\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Terminal\">\r\n                <div className=\"titleBar\">\r\n                    <div className=\"controls\">\r\n                        { this.circle(\"#FF6059\") }\r\n                        { this.circle(\"#FFBD2E\") }\r\n                        { this.circle(\"#28CA42\") }\r\n                    </div>\r\n                    root\r\n                </div>\r\n                { this.inputHistory() }\r\n                { this.inputBox() }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\walz\\portfolio\\src\\components\\Project.js",["62","63","64","65","66"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './Project.css';\r\n\r\nexport default class Project extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            desc: undefined,\r\n            lang: undefined,\r\n            langIcon: undefined\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://api.github.com/repos/walz0/' + this.props.title, {\r\n                headers: { \"Authorization\": \"Bearer \" + process.env.REACT_APP_GITHUB_TOKEN }\r\n            })\r\n            .then((response) => {\r\n                this.setState({\r\n                    desc: response.data[\"description\"]\r\n                })\r\n            })\r\n            .catch((err) => {})\r\n        axios.get('https://api.github.com/repos/walz0/' + this.props.title + '/languages', {\r\n                headers: { \"Authorization\": \"Bearer \" + process.env.REACT_APP_GITHUB_TOKEN }\r\n            })\r\n            .then((response) => {\r\n                // Select languages with most lines of code\r\n                let icon = Object.keys(response.data)[0].toLowerCase()\r\n                if (icon == \"html\") { icon = \"html5\" }\r\n                if (icon == \"c++\") { icon = \"cplusplus\" }\r\n                this.setState({\r\n                    lang: Object.keys(response.data)[0],\r\n                    langIcon: icon\r\n                })\r\n            })\r\n            .catch((err) => {})\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.lang)\r\n        return (\r\n            <div className=\"Project\">\r\n                <div className=\"project-title\">{ this.props.title }</div>\r\n                <div className=\"project-desc\">{ this.state.desc }</div>\r\n                <div className=\"github\">\r\n                    <a href={ \"https://github.com/walz0/\" + this.props.title } target=\"_blank\">Source Code</a>\r\n                </div>\r\n                <div className=\"bottom-container\">\r\n                    <div className=\"language\">\r\n                        { this.state.lang ? <img \r\n                            src={`https://cdn.jsdelivr.net/gh/devicons/devicon/icons/${this.state.langIcon}/${this.state.langIcon}-original.svg`} \r\n                            className=\"lang-icon\"/> : null}\r\n                        { this.state.lang }\r\n                    </div>\r\n                    { this.props.demo !== undefined ? \r\n                        <div className=\"demo\">\r\n                            <a href={ this.props.demo } target=\"_blank\">📑 Demo</a>\r\n                        </div> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":4,"column":10,"nodeType":"73","messageId":"74","endLine":4,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":5,"column":10,"nodeType":"73","messageId":"74","endLine":5,"endColumn":18},{"ruleId":"76","severity":1,"message":"77","line":18,"column":87,"nodeType":"78","endLine":18,"endColumn":102},{"ruleId":"79","severity":1,"message":"80","line":101,"column":46,"nodeType":"81","messageId":"82","endLine":101,"endColumn":48},{"ruleId":"79","severity":1,"message":"80","line":111,"column":30,"nodeType":"81","messageId":"82","endLine":111,"endColumn":32},{"ruleId":"79","severity":1,"message":"80","line":125,"column":46,"nodeType":"81","messageId":"82","endLine":125,"endColumn":48},{"ruleId":"79","severity":1,"message":"80","line":136,"column":32,"nodeType":"81","messageId":"82","endLine":136,"endColumn":34},{"ruleId":"79","severity":1,"message":"80","line":139,"column":37,"nodeType":"81","messageId":"82","endLine":139,"endColumn":39},{"ruleId":"71","severity":1,"message":"83","line":150,"column":25,"nodeType":"73","messageId":"74","endLine":150,"endColumn":32},{"ruleId":"79","severity":1,"message":"80","line":155,"column":32,"nodeType":"81","messageId":"82","endLine":155,"endColumn":34},{"ruleId":"79","severity":1,"message":"80","line":162,"column":37,"nodeType":"81","messageId":"82","endLine":162,"endColumn":39},{"ruleId":"79","severity":1,"message":"80","line":174,"column":29,"nodeType":"81","messageId":"82","endLine":174,"endColumn":31},{"ruleId":"79","severity":1,"message":"80","line":183,"column":29,"nodeType":"81","messageId":"82","endLine":183,"endColumn":31},{"ruleId":"79","severity":1,"message":"80","line":198,"column":46,"nodeType":"81","messageId":"82","endLine":198,"endColumn":48},{"ruleId":"79","severity":1,"message":"80","line":291,"column":19,"nodeType":"81","messageId":"82","endLine":291,"endColumn":21},{"ruleId":"79","severity":1,"message":"80","line":32,"column":26,"nodeType":"81","messageId":"82","endLine":32,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":33,"column":26,"nodeType":"81","messageId":"82","endLine":33,"endColumn":28},{"ruleId":"76","severity":1,"message":"77","line":49,"column":80,"nodeType":"78","endLine":49,"endColumn":95},{"ruleId":"84","severity":1,"message":"85","line":53,"column":45,"nodeType":"86","endLine":55,"endColumn":52},{"ruleId":"76","severity":1,"message":"77","line":60,"column":57,"nodeType":"78","endLine":60,"endColumn":72},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar","'faGithub' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'context' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]