[{"/home/walz/portfolio/src/index.js":"1","/home/walz/portfolio/src/App.js":"2","/home/walz/portfolio/src/reportWebVitals.js":"3","/home/walz/portfolio/src/components/Navbar.js":"4","/home/walz/portfolio/src/components/Home.js":"5","/home/walz/portfolio/src/components/Code.js":"6","/home/walz/portfolio/src/components/Project.js":"7","/home/walz/portfolio/src/components/Section.js":"8","/home/walz/portfolio/src/components/Terminal.js":"9","/home/walz/portfolio/src/components/Cascade.js":"10"},{"size":500,"mtime":1664865372209,"results":"11","hashOfConfig":"12"},{"size":530,"mtime":1664865372205,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1664865372209,"results":"14","hashOfConfig":"12"},{"size":1137,"mtime":1664865372205,"results":"15","hashOfConfig":"12"},{"size":1903,"mtime":1664865673009,"results":"16","hashOfConfig":"12"},{"size":613,"mtime":1664865372205,"results":"17","hashOfConfig":"12"},{"size":2538,"mtime":1664877647783,"results":"18","hashOfConfig":"12"},{"size":537,"mtime":1664865372209,"results":"19","hashOfConfig":"12"},{"size":11469,"mtime":1664865372209,"results":"20","hashOfConfig":"12"},{"size":497,"mtime":1664865372205,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1yza8le",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/walz/portfolio/src/index.js",[],["45","46"],"/home/walz/portfolio/src/App.js",[],"/home/walz/portfolio/src/reportWebVitals.js",[],"/home/walz/portfolio/src/components/Navbar.js",["47","48"],"import React, { Component } from 'react';\nimport './Navbar.css';\nimport logo from '../logo.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nexport default class Navbar extends Component {\n    render() {\n        return (\n            <div className=\"Navbar\">\n                <a href='/'>\n                    <img className=\"logo\" src={logo} alt=\"logo\"></img>\n                </a>\n                <ul>\n                    {/* <div className=\"github-link\">\n                        <a href=\"https://www.github.com/walz0/\" title=\"github.com/walz0\">\n                            <FontAwesomeIcon icon={faGithub} />\n                        </a>\n                    </div> */}\n                    <li>\n                        <a href=\"/about\">about</a>\n                    </li>\n                    <li>\n                        <a href=\"/contact\">contact</a>\n                    </li>\n                    <li>\n                        <a href=\"/blog\">blog</a>\n                    </li>\n                </ul>                \n            </div>\n        )\n    }\n}\n","/home/walz/portfolio/src/components/Home.js",[],"/home/walz/portfolio/src/components/Code.js",[],"/home/walz/portfolio/src/components/Project.js",["49","50","51","52","53"],"/home/walz/portfolio/src/components/Section.js",[],"/home/walz/portfolio/src/components/Terminal.js",["54","55","56","57","58","59","60","61","62","63","64","65"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport './Terminal.css';\n\nexport default class Terminal extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inputText: \"\",\n            lines: [\n                `\n                ~\n                my name is aidan, im currently a freelance developer looking to\n                expand my horizons to something new and interesting. for the past\n                year i have specialized in web3 apps on the ethereum and solana\n                networks. i enjoy designing efficient and scalable systems to deliver\n                reliable products that push expectations. my true passion lies in\n                python development, many of my favorite projects are compact and\n                effective scripts i wrote on a binge after an idea popped into my\n                head. feel free to have a look at my work, and if you are interested\n                in working together send me an email @ aidan.m.walz@gmail.com\n                ~\n                Type 'help' for more info on the available commands...`\n            ],\n            user: \"root\",\n            wd: \"~\",\n            prevPath: \"\",\n            fs: {\n                \"~\": {\n                    \"code\": {},\n                    \"secret\": {}\n                }\n            },\n            version: null\n        };\n\n        this.ref = React.createRef();\n    }\n\n    componentDidMount () {\n        // Scroll any init text into view\n        let inputBox = this.ref.current;\n        inputBox.scrollTop = inputBox.scrollHeight + 50;\n\n        // Get total number of commits on portfolio\n        axios.get('https://api.github.com/repos/walz0/portfolio/commits', {\n            headers: { \"Authorization\": \"Bearer \" + process.env.REACT_APP_GITHUB_TOKEN }\n        })\n            .then((response) => {\n                this.setState({\n                    version: parseInt(response.data.length, 10)\n                })\n            })\n            .catch((err) => {})\n    }\n\n    // Push the latest command into history and execute\n    push(input) {\n        // Parse input to remove undefined output\n        let parsed = []\n        for (var i = 0; i < input.length; i++) {\n            if (input[i] !== undefined) {\n                parsed.push(input[i]);\n            }\n        }\n        this.setState({\n            lines: \n                this.state.lines.concat(\n                    parsed\n                )\n        });\n    }\n\n    getCommand(input) {\n        const commands = {\n            \"pwd\": () => { \n                let base = \"~\";\n                if (this.state.wd !== \"~\") {\n                    return ([\n                        base + this.state.wd.slice(1)\n                    ]); \n                } \n                else {\n                    return this.state.user;\n                }\n            },\n            \"ls\": () => { \n                // Search file system for current directory\n                // Print dirs and files within current directory\n                let path = this.state.wd.split('/');\n\n                // All dirs that have been traversed\n                let traversed = [];\n                // Temp var for traversing fs\n                let temp = []; \n\n                for (var i = 0; i < path.length; i++) {\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\n                        // Working dir has been found\n                        break;\n                    }\n                    // Temp var for traversing fs\n                    temp = this.state.fs[path[i]];\n                    // Push dir\n                    traversed.push(path[i]);\n                }\n\n                return (temp == undefined) ? undefined : Object.keys(temp).join('  ');\n            },\n            // \"l\": () => { return this.getCommand(\"ls\") },\n            \"cd\": (newPath) => {\n                // Search file system for current directory\n                // Print dirs and files within current directory\n                let path = this.state.wd.split('/');\n\n                // All dirs that have been traversed\n                let traversed = [];\n                // Temp var for traversing fs\n                let temp = []; \n\n                for (var i = 0; i < path.length; i++) {\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\n                        // Working dir has been found\n                        break;\n                    }\n                    // Temp var for traversing fs\n                    temp = this.state.fs[path[i]];\n                    // Push dir\n                    traversed.push(path[i]);\n                }\n\n                // Do not change directory\n                if (newPath[0] == \".\") {\n                    return undefined;\n                }\n                else if (newPath[0] == \"..\") {\n                    // Get directories as list\n                    let dirs = this.state.wd.split('/');\n                    // Update working directory\n                    this.setState({\n                        wd: dirs.slice(0, dirs.length - 1).join('/')\n                    });\n                    return undefined;\n                }\n                else {\n                    // Current directory environment\n                    let context = temp;\n\n                    let prefix = newPath[0].slice(0, 2);\n\n                    // if ../path or ./path\n                    if (prefix == \"./\") {\n                        // Same behavior as without ./\n                        this.setState({\n                            wd: this.state.wd + '/' + newPath[0].slice(2)\n                        })\n                        return undefined;\n                    }\n                    else if (prefix == \"..\") {\n                        \n                    }\n                    else {\n                        this.setState({\n                            wd: this.state.wd + '/' + newPath\n                        })\n                        return undefined;\n                    }\n                }\n            },\n            \"mkdir\": (dirName) => {\n                if (dirName == undefined) {\n                    return 'mkdir: missing operand';\n                }\n\n                // Search file system for current directory\n                // Print dirs and files within current directory\n                let path = this.state.wd.split('/');\n\n                // If root\n                if (path[0] == \"~\") {\n                    let temp = this.state.fs;\n                    temp['~'][dirName] = {};\n                    this.setState({\n                        fs: temp\n                    });\n                    return undefined;\n                }\n\n                // All dirs that have been traversed\n                let traversed = [];\n                // Temp var for traversing fs\n                let temp = []; \n\n                for (var i = 0; i < path.length - 1; i++) {\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\n                        // Working dir has been found\n                        break;\n                    }\n                    // Temp var for traversing fs\n                    temp = this.state.fs[path[i]];\n                    // Push dir\n                    traversed.push(path[i]);\n                }\n\n                let currDir = path[path.length - 1];\n                // Create new directory\n                temp[currDir][dirName] = {};\n                // Update state\n                this.setState({\n                    fs: temp\n                });\n            },\n            \"banner\": () => { return (`\n                This is a banner\n                ===========================\n                :)\n            `); },\n            \"whoami\": () => { return (this.state.user) }\n        }\n\n\n        let argv = input.split(\" \");\n\n        let hasParams = false;\n        // If command has parameters\n        if (argv.length > 1) {\n            hasParams = true;\n        }\n\n        let selected = \"\";\n        for (var c in commands) {\n            if (argv[0] === c) {\n                selected = c;\n            }\n        }\n\n        if (selected !== \"\") {\n            let echo = `${this.state.user}:${this.state.wd}λ ${input}`;\n            if (hasParams) {\n                this.push([echo, commands[selected](argv.slice(1))]);\n            } else {\n                this.push([echo, commands[selected]()]);\n            }\n        }\n        else {\n            this.push([`${input}: command not found`]);\n        }\n    }\n\n    handleInput(e) {\n        let pos = this.state.user.length + 2 + this.state.wd.length + 1;\n        this.setState({\n            inputText: e.target.value.slice(pos)\n        });\n        \n        const inputHistory = this.ref.current;\n        if (inputHistory != null) {\n            inputHistory.scrollTop = inputHistory.scrollHeight + 50;\n        }\n\n        if (e.target.selectionStart < pos) {\n            e.target.selectionStart = pos;\n        }\n    }\n\n    inputBox() {\n        return(\n            <input \n                autoFocus={ true }\n                value={ this.state.user + \":\" + this.state.wd + \"λ \" + this.state.inputText}\n                onChange={this.handleInput.bind(this)}\n                onKeyDown={this.submitInput.bind(this)}\n                onClick={this.handleInput.bind(this)}\n                spellCheck={false}></input>\n        );\n    }\n\n    inputHistory() {\n        // Fill box with lines to push new ones to the bottom\n        let output = ``;\n        for (var i = 0; i < 200; i++) {\n            output += `⠀\n            `;\n        }\n\n        let lines = this.state.lines;\n        for (i = 0; i < lines.length; i++) {\n            if (i == 0) {\n                output += `portfoliOS :: [Version ${this.state.version}]\n                `;\n            }\n            output += `${lines[i]}\n            `;\n        }\n\n        output = output.replace(/^\\s+/mg, \"\");\n\n        return(\n            <pre ref={this.ref}>\n                { output }\n            </pre>\n        );\n    }\n\n    submitInput(e) {\n        let key = e.keyCode;\n        let enter = 13;\n\n        if (key === enter) {\n            this.getCommand(this.state.inputText);\n            this.setState({ \n                inputText: \"\",\n                },\n                () => {\n                    // Scroll terminal to bottom\n                    const inputHistory = this.ref.current;\n                    if (inputHistory != null) {\n                        inputHistory.scrollTop = inputHistory.scrollHeight + 50;\n                    }\n                }\n            );\n        }\n        else {\n            if (e.target.selectionStart <= 2) {\n                e.target.selectionStart = 2;\n            }\n        }\n    }\n\n    circle(color) {\n        return(\n            <div className=\"circle\">\n                <svg viewBox=\"0 0 100 100\" id=\"circle\">\n                    <circle cx=\"50\" cy=\"50\" r=\"50\" fill={color} />\n                </svg>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"Terminal\">\n                <div className=\"titleBar\">\n                    <div className=\"controls\">\n                        { this.circle(\"#FF6059\") }\n                        { this.circle(\"#FFBD2E\") }\n                        { this.circle(\"#28CA42\") }\n                    </div>\n                    root\n                </div>\n                { this.inputHistory() }\n                { this.inputBox() }\n            </div>\n        )\n    }\n}\n","/home/walz/portfolio/src/components/Cascade.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":4,"column":10,"nodeType":"72","messageId":"73","endLine":4,"endColumn":25},{"ruleId":"70","severity":1,"message":"74","line":5,"column":10,"nodeType":"72","messageId":"73","endLine":5,"endColumn":18},{"ruleId":"75","severity":1,"message":"76","line":32,"column":26,"nodeType":"77","messageId":"78","endLine":32,"endColumn":28},{"ruleId":"75","severity":1,"message":"76","line":33,"column":26,"nodeType":"77","messageId":"78","endLine":33,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":49,"column":80,"nodeType":"81","endLine":49,"endColumn":95},{"ruleId":"82","severity":1,"message":"83","line":53,"column":45,"nodeType":"84","endLine":55,"endColumn":52},{"ruleId":"79","severity":1,"message":"80","line":60,"column":57,"nodeType":"81","endLine":60,"endColumn":72},{"ruleId":"75","severity":1,"message":"76","line":100,"column":46,"nodeType":"77","messageId":"78","endLine":100,"endColumn":48},{"ruleId":"75","severity":1,"message":"76","line":110,"column":30,"nodeType":"77","messageId":"78","endLine":110,"endColumn":32},{"ruleId":"75","severity":1,"message":"76","line":124,"column":46,"nodeType":"77","messageId":"78","endLine":124,"endColumn":48},{"ruleId":"75","severity":1,"message":"76","line":135,"column":32,"nodeType":"77","messageId":"78","endLine":135,"endColumn":34},{"ruleId":"75","severity":1,"message":"76","line":138,"column":37,"nodeType":"77","messageId":"78","endLine":138,"endColumn":39},{"ruleId":"70","severity":1,"message":"85","line":149,"column":25,"nodeType":"72","messageId":"73","endLine":149,"endColumn":32},{"ruleId":"75","severity":1,"message":"76","line":154,"column":32,"nodeType":"77","messageId":"78","endLine":154,"endColumn":34},{"ruleId":"75","severity":1,"message":"76","line":161,"column":37,"nodeType":"77","messageId":"78","endLine":161,"endColumn":39},{"ruleId":"75","severity":1,"message":"76","line":173,"column":29,"nodeType":"77","messageId":"78","endLine":173,"endColumn":31},{"ruleId":"75","severity":1,"message":"76","line":182,"column":29,"nodeType":"77","messageId":"78","endLine":182,"endColumn":31},{"ruleId":"75","severity":1,"message":"76","line":197,"column":46,"nodeType":"77","messageId":"78","endLine":197,"endColumn":48},{"ruleId":"75","severity":1,"message":"76","line":290,"column":19,"nodeType":"77","messageId":"78","endLine":290,"endColumn":21},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar","'faGithub' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'context' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]