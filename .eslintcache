[{"C:\\Users\\walz\\portfolio\\src\\index.js":"1","C:\\Users\\walz\\portfolio\\src\\App.js":"2","C:\\Users\\walz\\portfolio\\src\\reportWebVitals.js":"3","C:\\Users\\walz\\portfolio\\src\\components\\Navbar.js":"4","C:\\Users\\walz\\portfolio\\src\\components\\Home.js":"5","C:\\Users\\walz\\portfolio\\src\\components\\Cascade.js":"6","C:\\Users\\walz\\portfolio\\src\\components\\Code.js":"7","C:\\Users\\walz\\portfolio\\src\\components\\Terminal.js":"8","C:\\Users\\walz\\portfolio\\src\\components\\Project.js":"9","C:\\Users\\walz\\portfolio\\src\\components\\Section.js":"10"},{"size":517,"mtime":1610836996927,"results":"11","hashOfConfig":"12"},{"size":526,"mtime":1611089991933,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1610836996927,"results":"15","hashOfConfig":"12"},{"size":688,"mtime":1622317723949,"results":"16","hashOfConfig":"12"},{"size":2329,"mtime":1622342541919,"results":"17","hashOfConfig":"12"},{"size":514,"mtime":1610836996923,"results":"18","hashOfConfig":"12"},{"size":643,"mtime":1619969748375,"results":"19","hashOfConfig":"12"},{"size":11430,"mtime":1621228370341,"results":"20","hashOfConfig":"12"},{"size":636,"mtime":1622317492717,"results":"21","hashOfConfig":"12"},{"size":557,"mtime":1620065547659,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1hdzyap",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4l1xo5",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\walz\\portfolio\\src\\index.js",[],["47","48"],"C:\\Users\\walz\\portfolio\\src\\App.js",[],["49","50"],"C:\\Users\\walz\\portfolio\\src\\reportWebVitals.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Navbar.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Home.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Cascade.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Code.js",[],["51","52"],"C:\\Users\\walz\\portfolio\\src\\components\\Terminal.js",["53","54","55","56","57","58","59","60","61","62","63","64"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './Terminal.css';\r\n\r\nexport default class Terminal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputText: \"\",\r\n            lines: [\r\n                `Welcome to my website! \r\n                I'm a software engineer that works mainly in web design and data \r\n                mining / bots. I also enjoy game design and develop games in the\r\n                Unity engine occasionally. Below is a collection of some notable \r\n                projects, as well as this terminal, which is completely interactive!\r\n                ~\r\n                ~\r\n                ~\r\n                ~\r\n                ~\r\n                ~\r\n                ~\r\n                Type 'help' for more info on the available commands...`\r\n            ],\r\n            user: \"root\",\r\n            wd: \"~\",\r\n            prevPath: \"\",\r\n            fs: {\r\n                \"~\": {\r\n                    \"code\": {},\r\n                    \"secret\": {}\r\n                }\r\n            },\r\n            version: null\r\n        };\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n        // Scroll any init text into view\r\n        let inputBox = this.ref.current;\r\n        inputBox.scrollTop = inputBox.scrollHeight + 50;\r\n\r\n        // Get total number of commits on portfolio\r\n        axios.get('https://api.github.com/repos/walz0/portfolio/commits')\r\n            .then((response) => {\r\n                this.setState({\r\n                    version: parseInt(response.data.length, 10)\r\n                })\r\n            })\r\n            .catch((err) => {})\r\n    }\r\n\r\n    // Push the latest command into history and execute\r\n    push(input) {\r\n        // Parse input to remove undefined output\r\n        let parsed = []\r\n        for (var i = 0; i < input.length; i++) {\r\n            if (input[i] !== undefined) {\r\n                parsed.push(input[i]);\r\n            }\r\n        }\r\n        this.setState({\r\n            lines: \r\n                this.state.lines.concat(\r\n                    parsed\r\n                )\r\n        });\r\n    }\r\n\r\n    getCommand(input) {\r\n        const commands = {\r\n            \"pwd\": () => { \r\n                let base = \"~\";\r\n                if (this.state.wd !== \"~\") {\r\n                    return ([\r\n                        base + this.state.wd.slice(1)\r\n                    ]); \r\n                } \r\n                else {\r\n                    return this.state.user;\r\n                }\r\n            },\r\n            \"ls\": () => { \r\n                // Search file system for current directory\r\n                // Print dirs and files within current directory\r\n                let path = this.state.wd.split('/');\r\n\r\n                // All dirs that have been traversed\r\n                let traversed = [];\r\n                // Temp var for traversing fs\r\n                let temp = []; \r\n\r\n                for (var i = 0; i < path.length; i++) {\r\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\r\n                        // Working dir has been found\r\n                        break;\r\n                    }\r\n                    // Temp var for traversing fs\r\n                    temp = this.state.fs[path[i]];\r\n                    // Push dir\r\n                    traversed.push(path[i]);\r\n                }\r\n\r\n                return (temp == undefined) ? undefined : Object.keys(temp).join('  ');\r\n            },\r\n            // \"l\": () => { return this.getCommand(\"ls\") },\r\n            \"cd\": (newPath) => {\r\n                // Search file system for current directory\r\n                // Print dirs and files within current directory\r\n                let path = this.state.wd.split('/');\r\n\r\n                // All dirs that have been traversed\r\n                let traversed = [];\r\n                // Temp var for traversing fs\r\n                let temp = []; \r\n\r\n                for (var i = 0; i < path.length; i++) {\r\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\r\n                        // Working dir has been found\r\n                        break;\r\n                    }\r\n                    // Temp var for traversing fs\r\n                    temp = this.state.fs[path[i]];\r\n                    // Push dir\r\n                    traversed.push(path[i]);\r\n                }\r\n\r\n                // Do not change directory\r\n                if (newPath[0] == \".\") {\r\n                    return undefined;\r\n                }\r\n                else if (newPath[0] == \"..\") {\r\n                    // Get directories as list\r\n                    let dirs = this.state.wd.split('/');\r\n                    // Update working directory\r\n                    this.setState({\r\n                        wd: dirs.slice(0, dirs.length - 1).join('/')\r\n                    });\r\n                    return undefined;\r\n                }\r\n                else {\r\n                    // Current directory environment\r\n                    let context = temp;\r\n\r\n                    let prefix = newPath[0].slice(0, 2);\r\n\r\n                    // if ../path or ./path\r\n                    if (prefix == \"./\") {\r\n                        // Same behavior as without ./\r\n                        this.setState({\r\n                            wd: this.state.wd + '/' + newPath[0].slice(2)\r\n                        })\r\n                        return undefined;\r\n                    }\r\n                    else if (prefix == \"..\") {\r\n                        \r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            wd: this.state.wd + '/' + newPath\r\n                        })\r\n                        return undefined;\r\n                    }\r\n                }\r\n            },\r\n            \"mkdir\": (dirName) => {\r\n                if (dirName == undefined) {\r\n                    return 'mkdir: missing operand';\r\n                }\r\n\r\n                // Search file system for current directory\r\n                // Print dirs and files within current directory\r\n                let path = this.state.wd.split('/');\r\n\r\n                // If root\r\n                if (path[0] == \"~\") {\r\n                    let temp = this.state.fs;\r\n                    temp['~'][dirName] = {};\r\n                    this.setState({\r\n                        fs: temp\r\n                    });\r\n                    return undefined;\r\n                }\r\n\r\n                // All dirs that have been traversed\r\n                let traversed = [];\r\n                // Temp var for traversing fs\r\n                let temp = []; \r\n\r\n                for (var i = 0; i < path.length - 1; i++) {\r\n                    if (JSON.stringify(path) == JSON.stringify(traversed)) {\r\n                        // Working dir has been found\r\n                        break;\r\n                    }\r\n                    // Temp var for traversing fs\r\n                    temp = this.state.fs[path[i]];\r\n                    // Push dir\r\n                    traversed.push(path[i]);\r\n                }\r\n\r\n                let currDir = path[path.length - 1];\r\n                // Create new directory\r\n                temp[currDir][dirName] = {};\r\n                // Update state\r\n                this.setState({\r\n                    fs: temp\r\n                });\r\n            },\r\n            \"banner\": () => { return (`\r\n                This is a banner\r\n                ===========================\r\n                :)\r\n            `); },\r\n            \"whoami\": () => { return (this.state.user) }\r\n        }\r\n\r\n\r\n        let argv = input.split(\" \");\r\n\r\n        let hasParams = false;\r\n        // If command has parameters\r\n        if (argv.length > 1) {\r\n            hasParams = true;\r\n        }\r\n\r\n        let selected = \"\";\r\n        for (var c in commands) {\r\n            if (argv[0] === c) {\r\n                selected = c;\r\n            }\r\n        }\r\n\r\n        if (selected !== \"\") {\r\n            let echo = `${this.state.user}:${this.state.wd}λ ${input}`;\r\n            if (hasParams) {\r\n                this.push([echo, commands[selected](argv.slice(1))]);\r\n            } else {\r\n                this.push([echo, commands[selected]()]);\r\n            }\r\n        }\r\n        else {\r\n            this.push([`${input}: command not found`]);\r\n        }\r\n    }\r\n\r\n    handleInput(e) {\r\n        let pos = this.state.user.length + 2 + this.state.wd.length + 1;\r\n        this.setState({\r\n            inputText: e.target.value.slice(pos)\r\n        });\r\n        \r\n        const inputHistory = this.ref.current;\r\n        if (inputHistory != null) {\r\n            inputHistory.scrollTop = inputHistory.scrollHeight + 50;\r\n        }\r\n\r\n        if (e.target.selectionStart < pos) {\r\n            e.target.selectionStart = pos;\r\n        }\r\n    }\r\n\r\n    inputBox() {\r\n        return(\r\n            <input \r\n                autoFocus={ true }\r\n                value={ this.state.user + \":\" + this.state.wd + \"λ \" + this.state.inputText}\r\n                onChange={this.handleInput.bind(this)}\r\n                onKeyDown={this.submitInput.bind(this)}\r\n                onClick={this.handleInput.bind(this)}\r\n                spellCheck={false}></input>\r\n        );\r\n    }\r\n\r\n    inputHistory() {\r\n        // Fill box with lines to push new ones to the bottom\r\n        let output = ``;\r\n        for (var i = 0; i < 200; i++) {\r\n            output += `⠀\r\n            `;\r\n        }\r\n\r\n        let lines = this.state.lines;\r\n        for (i = 0; i < lines.length; i++) {\r\n            if (i == 0) {\r\n                output += `portfoliOS :: [Version ${this.state.version}]\r\n                `;\r\n            }\r\n            output += `${lines[i]}\r\n            `;\r\n        }\r\n\r\n        output = output.replace(/^\\s+/mg, \"\");\r\n\r\n        return(\r\n            <pre ref={this.ref}>\r\n                { output }\r\n            </pre>\r\n        );\r\n    }\r\n\r\n    submitInput(e) {\r\n        let key = e.keyCode;\r\n        let enter = 13;\r\n\r\n        if (key === enter) {\r\n            this.getCommand(this.state.inputText);\r\n            this.setState({ \r\n                inputText: \"\",\r\n                },\r\n                () => {\r\n                    // Scroll terminal to bottom\r\n                    const inputHistory = this.ref.current;\r\n                    if (inputHistory != null) {\r\n                        inputHistory.scrollTop = inputHistory.scrollHeight + 50;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            if (e.target.selectionStart <= 2) {\r\n                e.target.selectionStart = 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    circle(color) {\r\n        return(\r\n            <div className=\"circle\">\r\n                <svg viewBox=\"0 0 100 100\" id=\"circle\">\r\n                    <circle cx=\"50\" cy=\"50\" r=\"50\" fill={color} />\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Terminal\">\r\n                <div className=\"titleBar\">\r\n                    <div className=\"controls\">\r\n                        { this.circle(\"#FF6059\") }\r\n                        { this.circle(\"#FFBD2E\") }\r\n                        { this.circle(\"#28CA42\") }\r\n                    </div>\r\n                    root\r\n                </div>\r\n                { this.inputHistory() }\r\n                { this.inputBox() }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\walz\\portfolio\\src\\components\\Project.js",[],"C:\\Users\\walz\\portfolio\\src\\components\\Section.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"65","replacedBy":"69"},{"ruleId":"67","replacedBy":"70"},{"ruleId":"65","replacedBy":"71"},{"ruleId":"67","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":98,"column":46,"nodeType":"75","messageId":"76","endLine":98,"endColumn":48},{"ruleId":"73","severity":1,"message":"74","line":108,"column":30,"nodeType":"75","messageId":"76","endLine":108,"endColumn":32},{"ruleId":"73","severity":1,"message":"74","line":122,"column":46,"nodeType":"75","messageId":"76","endLine":122,"endColumn":48},{"ruleId":"73","severity":1,"message":"74","line":133,"column":32,"nodeType":"75","messageId":"76","endLine":133,"endColumn":34},{"ruleId":"73","severity":1,"message":"74","line":136,"column":37,"nodeType":"75","messageId":"76","endLine":136,"endColumn":39},{"ruleId":"77","severity":1,"message":"78","line":147,"column":25,"nodeType":"79","messageId":"80","endLine":147,"endColumn":32},{"ruleId":"73","severity":1,"message":"74","line":152,"column":32,"nodeType":"75","messageId":"76","endLine":152,"endColumn":34},{"ruleId":"73","severity":1,"message":"74","line":159,"column":37,"nodeType":"75","messageId":"76","endLine":159,"endColumn":39},{"ruleId":"73","severity":1,"message":"74","line":171,"column":29,"nodeType":"75","messageId":"76","endLine":171,"endColumn":31},{"ruleId":"73","severity":1,"message":"74","line":180,"column":29,"nodeType":"75","messageId":"76","endLine":180,"endColumn":31},{"ruleId":"73","severity":1,"message":"74","line":195,"column":46,"nodeType":"75","messageId":"76","endLine":195,"endColumn":48},{"ruleId":"73","severity":1,"message":"74","line":288,"column":19,"nodeType":"75","messageId":"76","endLine":288,"endColumn":21},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],["81"],["82"],["81"],["82"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'context' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]